//
// Button Variables
//

// We use these to build padding for buttons.
$button-med: emCalc(10px) !default;
$button-tny: emCalc(5px) !default;
$button-sml: emCalc(7px) !default;
$button-lrg: emCalc(15px) !default;

// We use this to control the display property.
$button-display: inline-block !default;

// We use these to control button text styles.
$button-text-color: #fff !default;
$button-text-color-alt: #333 !default;
$button-text-med: emCalc(14px) !default;
$button-text-tny: emCalc(10px) !default;
$button-text-sml: emCalc(11px) !default;
$button-text-lrg: emCalc(17px) !default;
$button-text-weight: bold !default;
$button-text-align: center !default;

// We use these to control various hover effects.
$button-function-factor: 10% !default;

// We use these to control button border styles.
$button-border-width: 1px !default;
$button-border-style: solid !default;
$button-border-color: darken($primary-color, $button-function-factor) !default;

// We use this to set the default radius used throughout the core.
$button-radius: 3px !default;

// We use this to set default opacity for disabled buttons.
$button-disabled-opacity: 0.6 !default;

//
// Button Mixins
//

// We use this mixin to create a default button base.
@mixin button-base {
  border-style: $button-border-style;
  border-width: $button-border-width;
  cursor: pointer;
  display: $button-display;
  font-family: inherit;
  font-weight: $button-text-weight;
  line-height: 1;
  margin: 0;
  position: relative;
  text-decoration: none;
  text-align: $button-text-align;
}

// We use this mixin to add button size styles
@mixin button-size($padding:$button-med, $full-width:false, $is-input:false) {

  // We control which padding styles come through,
  // these can be turned off by setting $padding:false
  @if $padding {
    padding-top: $padding;
    padding-right: $padding * 2;
    padding-bottom: $padding + emCalc(1px);
    padding-left: $padding * 2;
    width: auto;

    // We control the font-size based on mixin input.
    @if      $padding == $button-med { font-size: $button-text-med; }
    @else if $padding == $button-tny { font-size: $button-text-tny; }
    @else if $padding == $button-sml { font-size: $button-text-sml; }
    @else if $padding == $button-lrg { font-size: $button-text-lrg; }
    @else                     { font-size: $padding - 2; }
  }

  // We can set $full-width:true to remove side padding extend width.
  @if $full-width {
    padding-top: $padding;
    padding-right: 0px;
    padding-bottom: $padding + emCalc(1px);
    padding-left: 0px;
    width: 100%;
  }

  // <input>'s and <button>'s take on strange padding. We added this to help fix that.
  @if $is-input == $button-lrg {
    padding-top: $is-input + emCalc(.5px);
    padding-bottom: $is-input + emCalc(.5px);
  }
  @else if $is-input {
    padding-top: $is-input + emCalc(1px);
    padding-bottom: $is-input;
  }
}

// We use this mixin to add button color styles
@mixin button-style($bg:$primary-color, $radius:false, $disabled:false) {

  // We control which background styles are used,
  // these can be removed by setting $bg:false
  @if $bg {
    background-color: $bg;
    border-color: darken($bg, $button-function-factor);
    &:hover,
    &:focus { background-color: darken($bg, $button-function-factor); }

    // We control the text color based on variables passed to mixin.
    @if $bg == $secondary-color {
      color: $button-text-color-alt;
      &:hover,
      &:focus { color: $button-text-color-alt; }
    }
    @else {
      color: $button-text-color;
      &:hover,
      &:focus { color: $button-text-color; }
    }
  }

  // We can set $disabled:true to create a disabled transparent button.
  @if $disabled {
    cursor: default;
    opacity: $button-disabled-opacity;
    @include box-shadow(none);
    &:hover,
    &:focus {
      background-color: $bg;
      @include box-shadow(none); }
  }

  // We can control how much button radius us used.
  @if $radius == true { @include border-radius($button-radius); }
  @else if $radius { @include border-radius($radius); }

}

// We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
@mixin button($padding:$button-med, $bg:$primary-color, $radius:false, $full-width:false, $disabled:false) {
  @include button-base;
  @include button-size($padding, $full-width);
  @include button-style($bg, $radius, $disabled);
}


/* Buttons */
.button {
  @include button-base;
  @include button-size;
  @include button-style;
  @include inset-shadow();

  // Button Sizes
  &.large  { @include button-size($padding:$button-lrg); }
  &.medium { @include button-size; }
  &.small  { @include button-size($padding:$button-sml); }
  &.tiny   { @include button-size($padding:$button-tny); }
  &.expand { @include button-size($padding:false, $full-width: true); }

  // Button Radii
  &.radius { @include button-style($bg:false, $radius:true); }
  &.round  { @include button-style($bg:false, $radius:1000px); }

  // Button Layout
  &.left-align  { text-align: left; text-indent: emCalc(12px); }
  &.right-align { text-align: right; padding-right: emCalc(12px); }

  // Button Styles
  &.secondary { @include button-style($bg:$secondary-color); }
  &.success   { @include button-style($bg:$success-color); }
  &.alert     { @include button-style($bg:$alert-color); }

  // Disabled Buttons
  &.disabled, &[disabled] { @include button-style($bg:$primary-color, $disabled:true);
    &.secondary { @include button-style($bg:$secondary-color, $disabled:true); }
    &.success { @include button-style($bg:$success-color, $disabled:true); }
    &.alert { @include button-style($bg:$alert-color, $disabled:true); }
  }

}

/* <input> and <button> .button styles because they take on strange padding */
input.button,
button.button {
  @include button-size($padding:false, $is-input:$button-med);

  &.tiny { @include button-size($padding:false, $is-input:$button-tny); }
  &.small { @include button-size($padding:false, $is-input:$button-sml); }
  &.large { @include button-size($padding:false, $is-input:$button-lrg); }
}