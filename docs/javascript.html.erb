<% @page_title = "Javascript" %>
<div class="row">
  <div class="large-12 columns">
    <p><a href="index.html">&laquo; Back</a></p>
    <h1>Foundation <%= @page_title %></h1>
    <h4 class="subheader">Foundation 4 streamlines the implementation of the Foundation plugins by combining them all into essentialy one plugin under the <code>$.fn.foundation()</code> Zepto/jQuery namespace.</h4>
    <hr>
  </div>
</div>

<div class="row">
  <div class="large-12 columns">
    <h2>Installation</h2>
    <p>Foundation JavaScript was designed to work with <a href="http://zeptojs.com/" title="Zepto Docs">Zepto</a> and <a href="http://jquery.com/" title="jQuery Docs">jQuery</a> out of the gate. Zepto is not supported by all browsers, so as suggested in the Zepto documentation, you should test for compatability and load Zepto or jQuery as necessary.</p>

    <h5>Include Libraries</h5>
    <p>In the <code>head</code> section of your page, add Modernizr. Modernizr acts as a shim for HTML5 elements for older browsers as well as detection for mobile devices.</p>

<%= code_example '
<script src="/js/custom.modernizr.js></script>
', :html %>

    <p>Before the closing <code>body</code> tag, insert the following JavaScript.</p>

<%= code_example "
<!-- Check for Zepto support, load jQuery if necessary -->
<script>
  document.write('<script src=/js/vendor/'
    + ('__proto__' in {} ? 'zepto' : 'jquery')
    + '.js><\/script>');
</script>
", :html %>

    <p>Then include either <code>foundation.min.js</code>, which includes Foundation Core and all JavaScript plugins, or you can load them invidually as necessary.</p>

<%= code_example '
<script src="/js/foundation.min.js"></script>

<!-- or individualy -->

<script src="/js/foundation.js"></script>
<script src="/js/foundation.alerts.js"></script>
<!-- ... -->
<script src="/js/foundation.dropdown.js"></script>
<script src="/js/foundation.section.js"></script>
', :html %>

    <h5>Initialize Foundation</h5>
    <p>After you have included the foundation, all you need is one simple call to intialize all plugins on your page.</p>

<%= code_example '
<script>
  $(document).foundation();
</script>
', :html %>

    <p>That's all you need to call!</p>

    <p class="panel"><strong>Note:</strong> We include tested versions of jQuery and Zepto in the Foundation repo to get you started quickly. If you want to build your own version of Zepto, Foundation employs the <i>event</i>, <i>fx</i>, <i>fx_methods</i>, <i>ajax</i>, <i>form</i>, <i>assets</i>, <i>data</i>, <i>selector</i>, and <i>stack</i> modules.</p>

    <hr>

    <h2>Configuration</h2>

    <p>Foundation accepts a myriad of options on initialization. By default, calling <code>$('#scope').foundation();</code> will intialize all available plugins on the page. Alternatively, you can pass individual plugins along with configuration options and a callback; allowing you to start only certain plugins on your page, even if their source is included.</p>

<%= code_example "
$(document).foundation('section', {deep_linking: true}, function (response) {
  console.log(response.errors);
});
", :js %>

  <p>The above example will initialize the Section plugin on the page with deep linking enabled, and pass back a response object with any errors that may have occured.</p>

  <p>You can initialize multiple libraries within the same call as well. Here are a few ways this can be done.</p>

<%= code_example "
$(document).foundation('section dropdown alerts', {callback: myCallbackFunction}, function (response) {
  console.log(response.errors);
});

// alternative, no configuration

$(document).foundation('section dropdown alerts', function (response) {
  console.log(response.errors);
});

// alternative, all plugins, only callback

$(document).foundation(function (response) {
  console.log(response.errors);
});

// alternative, only plugin, no config or callback

$(document).foundation('section');
", :js %>

    <p>Keep in mind, if you initialize multiple plugins at one time and pass a configuration object, that object will get passed to all plugins that were initialized. So in the first example; section, dropdown, and alerts will all get passed the <code>myCallbackFunction</code> on initialization.</p>

    <p>What if you wanted to pass the <code>myCallbackFunction</code> only to Section and still initialize the other plugins as well? You could do the following.</p>

<%= code_example "
$(document)
  .foundation('dropdown alerts')
  .foundation('section', {callback: myCallbackFunction});
", :js %>

    <hr>

    <h2>Calling Internal Methods</h2>

    <p>Foundation 4 JavaScript allows you call call internal plugin methods by passing the method name as the second argument. This is necessary for plugins like Joyride, since they are not intialized on page load by default.</p>

<%= code_example "
$(document).foundation('joyride', 'start');
", :js %>

  <p>This will fire the <code>start</code> method on Joyride.</p>

  <h5>Unbind Events</h5>

  <p>All plugins can be unbound from the DOM by firing the <code>off</code> event either on that plugin or globally to unbind all Foundation events.</p>

<%= code_example "
$(document).foundation('tooltips', 'off');

// or globally

$(document).foundation('off');
", :js %>