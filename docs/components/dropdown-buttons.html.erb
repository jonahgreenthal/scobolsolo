<% @page_title = "Dropdown Buttons" %>
<div class="row">
  <div class="large-12 columns">
    <p><a href="/">&laquo; Back</a></p>
    <h1>Foundation <%= @page_title %></h1>
    <h4 class="subheader">We've simplified our dropdown buttons by getting rid of the dedicated dropdown associated with them. Instead, you'll use our <a href="#">new dropdown plugin</a> to attach a dropdown to the button style of your choice.</h4>
  </div>
</div>

<div class="row">
  <div class="large-12 columns">

    <a href="#" data-dropdown="drop" class="tiny button dropdown">Dropdown Button</a><br>
    <a href="#" data-dropdown="drop" class="small secondary radius button dropdown">Dropdown Button</a><br>
    <a href="#" data-dropdown="drop" class="button alert round dropdown">Dropdown Button</a><br>
    <a href="#" data-dropdown="drop" class="large success button dropdown">Dropdown Button</a><br>
    <a href="#" data-dropdown="drop" class="large button dropdown expand">Dropdown Button</a><br>

    <ul id="drop" class="f-dropdown" data-dropdown-content>
      <li><a href="#">This is a link</a></li>
      <li><a href="#">This is another</a></li>
      <li><a href="#">Yet another</a></li>
    </ul>

    <hr>

    <h3>Build With Predefined HTML Classes</h3>
    <p>There are two ways to build buttons in Foundation 4, with our predefined HTML classes or with our structure and mixins. Building buttons using our predefined classes is simple, you'll need an <code>&lt;a&gt;</code>, <code>&lt;button&gt;</code> or <code>&lt;input&gt;</code> with a class of <code>.button.dropdown</code>. This will create a default medium button. You can also use size, color and radius classes to control more of the style.</p>

    <p>The classes options:</p>
    <ul class="disc">
      <li>The size classes include: <code>.tiny, .small, .medium</code> or <code>.large</code></li>
      <li>The color classes include: <code>.secondary, .alert</code> or <code>.success</code></li>
      <li>The radius classes include: <code>.radius</code> or <code>.round</code>.</li>
    </ul>

<%= code_example '
<!-- Size Classes -->
<a href="#" class="button dropdown">Default Button</a>
<a href="#" class="tiny button dropdown">Tiny Button</a>
<a href="#" class="small button dropdown">Small Button</a>
<a href="#" class="large button dropdown">Large Button</a>

<!-- Color Classes -->
<a href="#" class="button dropdown secondary">Secondary Button</a>
<a href="#" class="button dropdown success">Success Button</a>
<a href="#" class="button dropdown alert">Alert Button</a>

<!-- Radius Classes -->
<a href="#" class="button dropdown radius">Radius Button</a>
<a href="#" class="button dropdown round">Round Button</a>
', :html %>

    <p>You may chain one class from each group to build up desired default styles. For these styles to take effect, make sure you have the <strong>default Foundation CSS package</strong> or that you've selected <strong>dropdown buttons from a custom package</strong>. These should be linked up following our default <a href="#getting-started">HTML page structure</a>.</p>

    <hr>

    <h3>Build with Mixins</h3>
    <p>We've included SCSS mixins used to style buttons. To use these mixins, you'll need to have the <a href="#extention-install">extention installed</a> or grab <a href="#">_foundation-global.scss</a>, <a href="#">_buttons.scss</a> and <a href="#">_dropdown-buttons.scss</a> from Github and throw them into a foundation folder in your project directory. From there, you can import the files at the top of your own SCSS stylesheet, like so:</p>

<%= code_example '
@import "foundation/foundation-global", "foundation/buttons", "foundation/dropdown-buttons";
', :css %>

    <p>If you are using the mixins, you may include the styles on whatever class or ID you'd like, just make sure you follow our markup structure:</p>

<%= code_example '
<a href="#" class="your-class-name">Button Text</a>
', :html %>

    <h5>Quick Mixin</h5>
    <p>You can quickly build an entire dropdown buttons using our global mixin by including it on your custom class or ID in your stylesheet. The global mixin will create the necessary style for the button. The global mixin looks like this:</p>

<%= code_example '
/* Using the default styles */
.your-class-name {
  @include button;
  @include dropdown-button;
}
', :css %>

    <a href="" class="dropdown button">Default Dropdown Button</a>

    <p>There are also <strong>three options</strong> you can customize on the fly when writing this mixin. These control things like: background color, pip color, and base styles. Setting any of these options to <strong>false</strong> will not include the styles.</p>

<%= code_example '
/* Using the available options */
.your-class-name {
  @include button;
  @include dropdown-button($padding, $pip-color, $base-styles);
}

/* This controls padding around the dropdown buttons. Use tiny, small, medium, or large */
$padding: $button-med

/* This controls the dropdown pip color. Set to one of our variables or a custom hex value */
$pip-color: #fff

/* This controls whether or not base styles come through. Set to false to negate */
/* Handy when you want to have many different styles */
$base-style: true
', :css %>

      <h5>Inset Shadow, Border Radius &amp; Transition Mixin</h5>
      <p>Sometimes you want to add a nice fancy shine to the edge of your button. And sometimes you want to make that shine look like it gets depressed upon tap or click. We've got you covered with our quick inset shadow mixin. You can use our radius mixin to quickly apply rounded corners or a transition mixin to give the button a nice zero-fade.</p>

<%= code_example '
.your-class-name {
  @include button;
  @include dropdown-button;
  @include radius;
  @include single-transition;
  @include inset-shadow;
}
', :css %>

<a href="#" class="customized-dropdown-docs">Button Base, Size, Style &amp; Shine</a>

    <h5>Default SCSS Variables</h5>
<%= code_example '
/* We use these to set the color of the pip in dropdown buttons */
$dropdown-button-pip-color:     #fff;
$dropdown-button-pip-color-alt: #333;

/* We use these to style tiny dropdown buttons */
$dropdown-button-padding-tny:   $button-tny * 5;
$dropdown-button-pip-size-tny:  $button-tny;
$dropdown-button-pip-right-tny: $button-tny * 2;
$dropdown-button-pip-top-tny:   -$button-tny / 2 + emCalc(1px);

/* We use these to style small dropdown buttons */
$dropdown-button-padding-sml:   $button-sml * 5;
$dropdown-button-pip-size-sml:  $button-sml;
$dropdown-button-pip-right-sml: $button-sml * 2;
$dropdown-button-pip-top-sml:   -$button-sml / 2 + emCalc(2px);

/* We use these to style medium dropdown buttons */
$dropdown-button-padding-med:   $button-med * 4 + emCalc(3px);
$dropdown-button-pip-size-med:  $button-med - emCalc(3px);
$dropdown-button-pip-right-med: $button-med * 2;
$dropdown-button-pip-top-med:   -$button-med / 2 + emCalc(2px);

/* We use these to style large dropdown buttons */
$dropdown-button-padding-lrg:   $button-lrg * 4;
$dropdown-button-pip-size-lrg:  $button-lrg - emCalc(6px);
$dropdown-button-pip-right-lrg: $button-lrg + emCalc(12px);
$dropdown-button-pip-top-lrg:   -$button-lrg / 2 + emCalc(3px);
', :css %>

    <p><strong>Note:</strong> <code>emCalc();</code> is a function we wrote to convert <code>px</code> to <code>em</code>. It is included in <strong>_foundation-global.scss</strong>.</p>

    <hr>

    <h3>Using the Javascript</h3>
    <p>You don't need ths JS to create dropdown button styles with Foundation. The only reason you'll need to include <code>foundation.dropdown.js</code> is if you want to add one of our dropdown to the button. You'll also need to make sure to include <code>zeptos.js</code> and <code>foundation.js</code> above the dropdown plugin. Above your closing <code>&lt;/body&gt;</code> tag include the following line of code and make sure you have the JS in your directory:</p>

<%= code_example '
<script src="path/to/zeptos.js"></script>
<script src="path/to/foundation.js"></script>
<script src="path/to/foundation.dropdown.js"></script>
<script type="text/javascript">
  $(document).foundation();
</script>
', :html %>

  </div>
</div>
