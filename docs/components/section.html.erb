<% @page_title = "Sections" %>
<div class="row">
  <div class="large-12 columns">
    <p><a href="/">&laquo; Back</a></p>
    <h1>Foundation <%= @page_title %></h1>
    <h4 class="subheader">Sections are similar to tabs as a way to selectively show a single panel of content at a time. You can add a <code>.hover</code> class to the accordion <code>ul</code> to make it open on hover.</h4>

    <div class="row">
      <div class="large-3 columns">
        <div class="section-container vertical-nav" data-section>
          <section class="section">
            <p class="title"><a href="http://zurb.com">Top Level Link</a></p>
          </section>
          <section class="section">
            <p class="title"><a href="#panel2">Section 2</a></p>
            <div class="content" data-slug="panel2">
              <p>Section 2. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
            </div>
          </section>
        </div>
      </div>
      <div class="large-9 columns">
        <div class="section-container tabs" data-section data-options="deep_linking: true">
          <section class="section">
            <p class="title"><a href="#panel1">Section 1</a></p>
            <div class="content" data-slug="panel1">
              <p>Section 1. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
            </div>
          </section>
          <section class="section">
            <p class="title"><a href="#panel2">Section 2 Section 2</a></p>
            <div class="content" data-slug="panel2">
              <p>Section 2. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
            </div>
          </section>
        </div>
      </div>
    </div>

    <hr>

    <h3>Sections Replace Accordion, Tabs &amp; Vertical Nav</h3>
    <p>Sections replace a few things that you are used to from Foundation 3. We've taken the accordion, the tabs and the vertical nav and combined them into this really flexible plugin that can handle all of those. The single JS file handles all the interactionss, but the classes you add to the element control how it gets rendered and styled across our breakpoint.</p>

    <hr>

  </div>
</div>

<div class="row">
  <div class="large-12 columns">

    <h3>Build With Predefined HTML Classes</h3>
    <p>There are two ways to build sections in Foundation 4, with our predefined HTML classes or with our structure and mixins. Building a sections using our predefined classes is super-easy, you just need to create a <code>&lt;div class="section-container" data-section&gt;</code> as a wrapper for the sections themselves. Inside of this wrapper, you'll create either a <code>&lt;section class="section"&gt;</code> or <code>&lt;div class="section"&gt;</code>. Within that you'll include some sort of <code>.title</code> (this can be headers or a paragragh) and a <code>&lt;div class="content"&gt;</code>. Here is the markup you'll need:</p>

<%= code_example '
<section class="section">
  <p class="title"><a href="#panel1">Section 1</a></p>
  <div class="content" data-slug="panel1">
    <p>Section 1. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
  </div>
</section>
<section class="section">
  <p class="title"><a href="#panel2">Section 2 Section 2</a></p>
  <div class="content" data-slug="panel2">
    <p>Section 2. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
  </div>
</section>', :html %>

    <p>For these styles to come across, make sure you have the <strong>default Foundation CSS package</strong> or that you've selected <strong>section from a custom package</strong>. These should be linked up following our default <a href="#getting-started">HTML page structure</a>.</p>

    <hr>

    <h3>Build with Mixins</h3>
    <p>We've included SCSS mixins used to style section elements. To use these mixins, you'll need to have the <a href="#extention-install">extention installed</a> or grab <a href="#">_foundation-global.scss</a> and <a href="#">_section.scss</a> from Github and throw them into a foundation folder in your project directory. From there, you can import the files at the top of your own SCSS stylesheet, like so:</p>

<%= code_example '
@import "foundation/foundation-global", "foundation/section";
', :css %>

    <p>If you are using the mixins, you may include the styles on whatever class or ID you'd like, just make sure you follow our markup structure:</p>

<%= code_example '
<section class="section">
  <p class="title"><a href="#panel1">Section 1</a></p>
  <div class="content" data-slug="panel1">
    <p>Section 1. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
  </div>
</section>
<section class="section">
  <p class="title"><a href="#panel2">Section 2 Section 2</a></p>
  <div class="content" data-slug="panel2">
    <p>Section 2. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
  </div>
</section>', :html %>


    <h5>Quick Mixin</h5>
    <p>You can build your alert using our global mixin by including it on your custom class or ID in your stylesheet. The mixin contains options for changing the background color, which also controls the border and text color. The rest of the defaults can be modified using the available variables. The global mixin looks like this:</p>

<%= code_example '
/* Using the default styles */
.your-class-name { @include alert; }

/* Using the available options */
.your-class-name { @include alert(#ff6c3c); }
', :css %>

<div data-alert class="alert-box">
This is a default alert.
<a href="#" class="close">&times;</a>
</div>

<div data-alert class="alert-base custom-bg">
This is an alert with a custom background set.
<a href="#" class="close">&times;</a>
</div>

    <h5>Base Mixin</h5>
    <p>Use this mixin to create the base styles for alert boxes. This will include styles that create the basic structure of an alert box.</p>


<%= code_example '
.your-class-name { @include alert-base; }
', :css %>

<div class="alert-base">This is the base mixin.</div>

    <h5>Background Mixin</h5>
    <p>You can control the background, border and text styles for the alert using this mixin. We base the border and text style on the background color you choose using some sweet Sass logic.</p>

<%= code_example '
.your-class-name {
  @include alert-base;
  @include alert-style($bg);
}', :css %>

    <div data-alert class="alert-base bg">This is base and bg mixins.</div>

    <p>You can set <code>$bg</code> color to any of our predefined color variables or any hexadecimal color of your choosing. To set this value to something other than our default, use <code>@include alert-bg(#hexcolor);</code></p>

    <h5>Close Button Mixin</h5>
    <p>You can include a close button with each of the alert boxes by adding an anchor right before the closing <code>&lt;/div&gt;</code>. This anchor should have a class of <code>.close</code> in order to work with <strong>foundation.alerts.js</strong>, which contains the interaction for closing.</p>

<%= code_example '
.your-class-name {
  @include alert-base;
  @include alert-style;
  .close { @include alert-close; }
}', :css %>

    <div data-alert class="alert-base bg">
      This is base, bg and close mixins.
      <a href="" class="close">&times;</a>
    </div>

    <h5>Radius Mixin</h5>
    <p>We've also created a global radius mixin that you can use to add border-radius to any element you'd like.</p>

<%= code_example '
.your-class-name {
  @include alert-base;
  @include alert-style($success-color);
  @include radius($radius);
}', :css %>

<div data-alert class="alert-base bg radius success">
This is base, bg and radius mixins.
<a href="" class="close">&times;</a>
</div>

    <h5>Default SCSS Variables</h5>
<%= code_example '
/* We use this to control alert padding. */
$alert-padding-top:         emCalc(11px);
$alert-padding-left:        $alert-padding-top;
$alert-padding-right:       $alert-padding-top + emCalc(10px);
$alert-padding-bottom:      $alert-padding-top + emCalc(1px);

/* We use these to control text style. */
$alert-font-weight:         bold;
$alert-font-size:           emCalc(14px);
$alert-font-color:          #fff;
$alert-font-color-alt:      darken($secondary-color, 60%);

/* We use this for close hover effect. */
$alert-function-factor:     10%;

/* We use these to control border styles. */
$alert-border-style:        solid;
$alert-border-width:        1px;
$alert-border-color:        darken($primary-color, $alert-function-factor);
$alert-bottom-margin:       emCalc(20px);

/* We use these to style the close buttons */
$alert-close-color:         #333;
$alert-close-position:      emCalc(5px);
$alert-close-font-size:     emCalc(22px);
$alert-close-opacity:       0.3;
$alert-close-opacity-hover: 0.5;
$alert-close-padding:       5px 4px 4px;

/* We use this to control border radius */
$alert-radius:              $global-radius;
', :css %>

<p><strong>Note:</strong> <code>emCalc();</code> is a function we wrote to convert <code>px</code> to <code>em</code>.</p>

    <hr>

    <h3>Using the Javascript</h3>
    <p>You don't need ths JS to create alert boxes with Foundation. The only reason you'll need to include <code>foundation.alerts.js</code> is if you want to add the ability to close an alert. You'll also need to make sure to include <code>zepto.js</code> and <code>foundation.js</code> above the alert plugin. Above your closing <code>&lt;/body&gt;</code> tag include the following line of code and make sure you have the JS in your directory:</p>

<%= code_example '
<script src="path/to/zepto.js"></script>
<script src="path/to/foundation.js"></script>
<script src="path/to/foundation.alerts.js"></script>
<script type="text/javascript">
  $(document).foundation();
</script>
', :html %>

    <p>Then, you'll need to add a data-attribute to make the JS work properly on that element. That looks like:</p>

<%= code_example '
<div data-alert class="alert-box">
  <!-- Your content goes here -->
  <a href="#" class="close">&times;</a>
</div>
', :html %>

  </div>
</div>
